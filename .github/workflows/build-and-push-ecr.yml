name: Build & Push Docker image to ECR

on:
  # Makes this workflow callable from other workflows
  workflow_call:
    inputs:
      ecr-repository:   # e.g. ‚Äúmy-service‚Äù
        type: string
        required: true
      aws-region:       # e.g. ‚Äúus-east-1‚Äù
        type: string
        required: true
      image-tag:        # defaults to the commit SHA
        type: string
        required: false
        default: ${{ github.sha }}
      # ecs-cluster:
      #   type: string
      #   required: true
      # ecs-service:
      #   type: string
      #   required: true

    secrets:
      AWS_ACCESS_KEY_ID:
      AWS_SECRET_ACCESS_KEY:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.ecr-repository }}
          file: ${{ inputs.ecr-repository }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}

      # 4. Surface the final image URL for downstream jobs
      - name: Export image reference
        run: |
          echo "image=${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: "getting-started-cluster"
      SERVICE_NAME: "${{ inputs.ecr-repository }}"
      SUBNETS: '"subnet-08548cbd3d971f42b","subnet-075f8d82da143e5fc"'
      SECURITY_GROUPS: '"sg-065955a201b76c577"'
      PUBLIC_IP: ENABLED
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: app                # container name inside the task def
          image: ${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr-repository }}:${{ inputs.image-tag }}

      - name: Register TD + create or update service
        id: ecs
        run: |
          set -euo pipefail
          TD_FILE="${{ steps.render.outputs.task-definition }}"
          echo "üì¶ Registering task definition ..."
          TD_ARN=$(aws ecs register-task-definition \
                    --cli-input-json file://"$TD_FILE" \
                    --query 'taskDefinition.taskDefinitionArn' \
                    --output text)

          echo "üîç Checking if service $SERVICE_NAME exists ..."
          if aws ecs describe-services \
                --cluster "$CLUSTER_NAME" \
                --services "$SERVICE_NAME" \
                --query 'failures' \
                --output json | jq -e '.|length==0' >/dev/null; then
            echo "‚úÖ Service exists ‚Äì just updating"
            aws ecs update-service \
                --cluster "$CLUSTER_NAME" \
                --service "$SERVICE_NAME" \
                --task-definition "$TD_ARN" \
                --desired-count "$DESIRED_COUNT" \
                --force-new-deployment
          else
            echo "‚ûï Service not found ‚Äì creating it"
            aws ecs create-service \
                --cluster "$CLUSTER_NAME" \
                --service-name "$SERVICE_NAME" \
                --task-definition "$TD_ARN" \
                --desired-count "$DESIRED_COUNT" \
                --launch-type "$LAUNCH_TYPE" \
                --network-configuration "awsvpcConfiguration={subnets=[${SUBNETS}],securityGroups=[${SECURITY_GROUPS}],assignPublicIp=${PUBLIC_IP}}" \
                --scheduling-strategy REPLICA
          fi

      # 3Ô∏è‚É£ Wait until the service is healthy
      - name: Wait for steady state
        run: |
          aws ecs wait services-stable \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME"

      # - uses: aws-actions/amazon-ecs-deploy-task-definition@v2       # latest v2.x
      #   with:
      #     task-definition: ${{ steps.render.outputs.task-definition }}
      #     service: my-ecs-service
      #     cluster: getting-started-cluster
      #     wait-for-service-stability: true
